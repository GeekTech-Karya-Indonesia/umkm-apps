{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Public\\\\Native\\\\umkm-apps\\\\src\\\\screens\\\\IngredientsDetails\\\\IngredientsDetailsScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Permissions from 'expo-permissions';\nimport polyline from '@mapbox/polyline';\nimport MapView, { Marker, Polyline } from 'react-native-maps';\nimport * as Location from 'expo-location';\n\nvar locations = require(\"./location.json\");\n\nvar _Dimensions$get = Dimensions.get('screen'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      latitude: null,\n      longitude: null,\n      locations: locations\n    };\n\n    _this.mergeCoords = function () {\n      var _this$state = _this.state,\n          latitude = _this$state.latitude,\n          longitude = _this$state.longitude,\n          desLatitude = _this$state.desLatitude,\n          desLongitude = _this$state.desLongitude;\n      var hasStartAndEnd = latitude !== null && desLatitude !== null;\n\n      if (hasStartAndEnd) {\n        var concatStart = latitude + \",\" + longitude;\n        var concatEnd = desLatitude + \",\" + desLongitude;\n\n        _this.getDirections(concatStart, concatEnd);\n      }\n    };\n\n    _this.onMarkerPress = function (location) {\n      return function () {\n        var _location$coords = location.coords,\n            latitude = _location$coords.latitude,\n            longitude = _location$coords.longitude;\n\n        _this.setState({\n          destination: location,\n          desLatitude: latitude,\n          desLongitude: longitude\n        }, _this.mergeCoords);\n      };\n    };\n\n    _this.renderMarkers = function () {\n      var locations = _this.state.locations;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, locations.map(function (location, idx) {\n        var _location$coords2 = location.coords,\n            latitude = _location$coords2.latitude,\n            longitude = _location$coords2.longitude;\n        return React.createElement(MapView.Marker, {\n          key: idx,\n          coordinate: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          onPress: _this.onMarkerPress(location),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }\n        });\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _await$Permissions$ge, status, response, _this$state$locations, sampleLocation;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$ge = _context.sent;\n              status = _await$Permissions$ge.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 7:\n              response = _context.sent;\n\n            case 8:\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}).then(function (_ref) {\n                var _ref$coords = _ref.coords,\n                    latitude = _ref$coords.latitude,\n                    longitude = _ref$coords.longitude;\n                return _this2.setState({\n                  latitude: latitude,\n                  longitude: longitude\n                }, _this2.mergeCoords);\n              }));\n\n            case 10:\n              _this$state$locations = _slicedToArray(this.state.locations, 1), sampleLocation = _this$state$locations[0];\n              this.setState({\n                desLatitude: sampleLocation.coords.latitude,\n                desLongitude: sampleLocation.coords.longitude\n              }, this.mergeCoords);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getDirections\",\n    value: function getDirections(startLoc, test) {\n      var lt, long, desLoc, GAPIS, resp, respJson, response, distanceTime, distance, time, points, coords;\n      return _regeneratorRuntime.async(function getDirections$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              lt = -6.4477257;\n              long = 107.0049049;\n              desLoc = lt + \",\" + long;\n              GAPIS = 'AIzaSyDslRfa7Rasda_OkMMM8tpCjasdasdsadadxAPHM4P5mmBlqA';\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(fetch(\"https://maps.googleapis.com/maps/api/directions/json?origin=\" + startLoc + \"&destination=\" + desLoc + \"&key=\" + GAPIS));\n\n            case 7:\n              resp = _context2.sent;\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(resp.json());\n\n            case 10:\n              respJson = _context2.sent;\n              response = respJson.routes[0];\n              distanceTime = response.legs[0];\n              distance = distanceTime.distance.text;\n              time = distanceTime.duration.text;\n              points = polyline.decode(respJson.routes[0].overview_polyline.points);\n              coords = points.map(function (point) {\n                return {\n                  latitude: point[0],\n                  longitude: point[1]\n                };\n              });\n              this.setState({\n                coords: coords,\n                distance: distance,\n                time: time\n              });\n              _context2.next = 23;\n              break;\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log('Error: ', _context2.t0);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 20]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          time = _this$state2.time,\n          coords = _this$state2.coords,\n          distance = _this$state2.distance,\n          latitude = _this$state2.latitude,\n          longitude = _this$state2.longitude,\n          destination = _this$state2.destination;\n\n      if (latitude && coords) {\n        return React.createElement(MapView, {\n          showsUserLocation: true,\n          style: {\n            flex: 1\n          },\n          initialRegion: {\n            latitude: latitude,\n            longitude: longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }\n        }, React.createElement(Marker, {\n          coordinate: {\n            latitude: -6.4477257,\n            longitude: 107.0049049\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 7\n          }\n        }), React.createElement(Polyline, {\n          coordinates: coords,\n          strokeColor: \"#000\",\n          strokeWidth: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 7\n          }\n        }), React.createElement(Image, {\n          source: {\n            uri: 'https://media.glassdoor.com/l/de/cd/ae/b6/the-face-shop.jpg'\n          },\n          style: {\n            flex: 1,\n            width: width * 0.95,\n            alignSelf: 'center',\n            height: height * 0.15,\n            position: 'absolute',\n            bottom: height * 0.05\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 6\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }, \"We need your permission!\"));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["E:/Public/Native/umkm-apps/src/screens/IngredientsDetails/IngredientsDetailsScreen.js"],"names":["React","Permissions","polyline","MapView","Marker","Polyline","Location","locations","require","Dimensions","get","width","height","App","state","latitude","longitude","mergeCoords","desLatitude","desLongitude","hasStartAndEnd","concatStart","concatEnd","getDirections","onMarkerPress","location","coords","setState","destination","renderMarkers","map","idx","getAsync","LOCATION","status","askAsync","response","getCurrentPositionAsync","then","sampleLocation","startLoc","test","lt","long","desLoc","GAPIS","fetch","resp","json","respJson","routes","distanceTime","legs","distance","text","time","duration","points","decode","overview_polyline","point","console","log","flex","latitudeDelta","longitudeDelta","uri","alignSelf","position","bottom","justifyContent","alignItems","Component","styles","StyleSheet","create","container","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet, Text, View, Image } from 'react-native';\n\nimport * as Permissions from 'expo-permissions'\nimport polyline from '@mapbox/polyline'\nimport MapView, { Marker, Polyline } from 'react-native-maps'\nimport * as Location from 'expo-location';\nconst locations = require('./location.json')\nconst { width, height } = Dimensions.get('screen')\n\nexport default class App extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    locations: locations\n  }\n\n  async componentDidMount() {\n    const { status } = await Permissions.getAsync(Permissions.LOCATION)\n\n    if (status !== 'granted') {\n      const response = await Permissions.askAsync(Permissions.LOCATION)\n    }\n\n    await Location.getCurrentPositionAsync({}).then(({ coords: { latitude, longitude } }) => this.setState({ latitude, longitude }, this.mergeCoords))\n    \n    const { locations: [ sampleLocation ] } = this.state\n\n    this.setState({\n      desLatitude: sampleLocation.coords.latitude,\n      desLongitude: sampleLocation.coords.longitude\n    }, this.mergeCoords)\n  }\n\n  mergeCoords = () => {\n    const {\n      latitude,\n      longitude,\n      desLatitude,\n      desLongitude\n    } = this.state\n\n    const hasStartAndEnd = latitude !== null && desLatitude !== null\n\n    if (hasStartAndEnd) {\n      const concatStart = `${latitude},${longitude}`\n      const concatEnd = `${desLatitude},${desLongitude}`\n      this.getDirections(concatStart, concatEnd)\n    }\n  }\n\n  async getDirections(startLoc, test) {\n    try {\n      const lt = -6.4477257;\n      const long = 107.0049049;\n      const desLoc = `${lt},${long}`\n      // const GAPIS = 'AIzaSyDslRfa7R_OkMMM8tpCjxAPHM4P5mmBlqA'\n      const GAPIS = 'AIzaSyDslRfa7Rasda_OkMMM8tpCjasdasdsadadxAPHM4P5mmBlqA'\n      const resp = await fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${startLoc}&destination=${desLoc}&key=${GAPIS}`)\n      const respJson = await resp.json();\n      const response = respJson.routes[0]\n      const distanceTime = response.legs[0]\n      const distance = distanceTime.distance.text\n      const time = distanceTime.duration.text\n      const points = polyline.decode(respJson.routes[0].overview_polyline.points);\n      const coords = points.map(point => {\n        return {\n          latitude: point[0],\n          longitude: point[1]\n        }\n      })\n      this.setState({ coords, distance, time })\n    } catch(error) {\n      console.log('Error: ', error)\n    }\n  }\n\n  onMarkerPress = location => () => {\n    const { coords: { latitude, longitude } } = location\n    this.setState({\n      destination: location,\n      desLatitude: latitude,\n      desLongitude: longitude\n    }, this.mergeCoords)\n  }\n\n  renderMarkers = () => {\n    const { locations } = this.state\n    return (\n      <View>\n        {\n          locations.map((location, idx) => {\n            const {\n              coords: { latitude, longitude }\n            } = location\n            return (\n              <MapView.Marker\n                key={idx}\n                coordinate={{ latitude, longitude }}\n                onPress={this.onMarkerPress(location)}\n              />\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  render() {\n    const {\n      time,\n      coords,\n      distance,\n      latitude,\n      longitude,\n      destination\n    } = this.state\n\n    if (latitude && coords) {\n      return (\n      <MapView\n        showsUserLocation\n        style={{\n          flex: 1\n        }}\n        initialRegion={{\n          latitude,\n          longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        }}\n      >\n       \n      <Marker\n        coordinate={{ latitude: -6.4477257, longitude: 107.0049049 }}\n        // onPress={this.onMarkerPress(location)}\n      />\n      <Polyline\n        coordinates={coords}\n        strokeColor=\"#000\" // fallback for when `strokeColors` is not supported by the map-provider\n        strokeWidth={6}\n      />\n     \n     <Image\n          source={{ uri: 'https://media.glassdoor.com/l/de/cd/ae/b6/the-face-shop.jpg' }}\n          style={{\n            flex: 1,\n            width: width * 0.95,\n            alignSelf: 'center',\n            height: height * 0.15,\n            position: 'absolute',\n            bottom: height * 0.05\n          }}\n        /> \n      \n      </MapView>\n\n\n      //   <MapView\n      //     showsUserLocation\n      //     style={styles.map}\n      //     initialRegion={{\n      //       latitude,\n      //       longitude,\n      //       latitudeDelta: 0.0922,\n      //       longitudeDelta: 0.0421\n      //     }}\n      //   >\n        \n      //   <MapView.Marker\n      //     coordinate={{ latitude: -6.4477257, longitude: 107.0049049 }}\n      //     onPress={this.onMarkerPress(location)}\n      //   />\n        \n      //    <View\n      //     style={{\n      //       width,\n      //       paddingTop: 10,\n      //       alignSelf: 'center',\n      //       alignItems: 'center',\n      //       height: height * 0.15,\n      //       backgroundColor: 'white',\n      //       justifyContent: 'flex-end',\n      //     }}>\n      //     <Text style={{ fontWeight: 'bold' }}>Estimated Time: {time}</Text>\n      //     <Text style={{ fontWeight: 'bold' }}>Estimated Distance: {distance}</Text>\n      //   </View>\n        \n        // <MapView.Polyline\n        //   strokeWidth={2}\n        //   strokeColor=\"red\"\n        //   coordinates={coords}\n        // />\n       \n      // </MapView>\n     \n      );\n    }\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>We need your permission!</Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}